# See https://www.wartremover.org/doc/warts.html. At the moment, only 'unsafe' warts are available in gradle.

warts {                              # Possible treat levels for a wart are: Error | Warning | Ignore
  Any = Error                        # Forbid: val x: Any = List(1, true, "three")
  AsInstanceOf = Error             # Forbid: x.asInstanceOf[String]
  DefaultArguments = Error          # Forbid: def x(y: Int = 0) = y
  EitherProjectionPartial = Error    # Forbid: not using Option with projections
  IsInstanceOf = Error             # Forbid: x.isInstanceOf[String]
  IterableOps = Warning                # Forbid: not using Option with iterables
  NonUnitStatements = Warning        # Forbid: def x(): Unit = 100
  Null = Warning                       # Forbid: val x = null
  OptionPartial = Warning              # Forbid: using Option.get
  Product = Warning                    # Forbid: val any = List((1, 2, 3), (1, 2)) (:Product)
  Return = Warning                     # Forbid: def x(): Int = return 5
  Serializable = Warning               # Forbid: val any = List((1, 2, 3), (1, 2)) (:Serializable)
  StringPlusAny = Warning            # Forbid: "foo"+{} or {}+"bar"
  Throw = Ignore                     # Forbid: throwing exceptions
  TripleQuestionMark = Warning       # Forbid: throwing the "???" exception
  TryPartial = Warning                 # Forbid: not using getOrElse with try partial
  Var = Ignore                       # Forbid: var x: Int = 10
}

//warts {                              # Possible treat levels for a wart are: Error | Warning | Ignore
//  Any = Error                        # Forbid: val x: Any = List(1, true, "three")
//  AsInstanceOf = Warning             # Forbid: x.asInstanceOf[String]
//  DefaultArguments = Ignore          # Forbid: def x(y: Int = 0) = y
//  EitherProjectionPartial = Error    # Forbid: not using Option with projections
//  IsInstanceOf = Warning             # Forbid: x.isInstanceOf[String]
//  IterableOps = Error                # Forbid: not using Option with iterables
//  NonUnitStatements = Warning        # Forbid: def x(): Unit = 100
//  Null = Error                       # Forbid: val x = null
//  OptionPartial = Error              # Forbid: using Option.get
//  Product = Error                    # Forbid: val any = List((1, 2, 3), (1, 2)) (:Product)
//  Return = Error                     # Forbid: def x(): Int = return 5
//  Serializable = Error               # Forbid: val any = List((1, 2, 3), (1, 2)) (:Serializable)
//  StringPlusAny = Warning            # Forbid: "foo"+{} or {}+"bar"
//  Throw = Ignore                     # Forbid: throwing exceptions
//  TripleQuestionMark = Warning       # Forbid: throwing the "???" exception
//  TryPartial = Error                 # Forbid: not using getOrElse with try partial
//  Var = Ignore                       # Forbid: var x: Int = 10
//}
